// import React, { createContext, useEffect, useState } from "react";

// export const TicketContext = createContext();

// export default function TicketProvider({ children }) {
//   const [tickets, setTickets] = useState([]); 
//   const [tasks, setTasks] = useState([]);     
//   const [resolved, setResolved] = useState([]);

//   useEffect(() => {
//     fetch("/tickets.json")
//       .then((res) => res.json())
//       .then((data) => setTickets(data))
//       .catch((err) => console.error("Failed to load tickets:", err));
//   }, []);

//   const addTask = (ticket) => {
//     setTasks((prev) => {
//       if (prev.some((t) => t.id === ticket.id)) return prev;
//       return [...prev, ticket];
//     });
//     setTickets((prev) => prev.filter((t) => t.id !== ticket.id));
//   };

//   const completeTask = (ticket) => {
//     setResolved((prev) => [...prev, ticket]);
//     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
//   };

//   return (
//     <TicketContext.Provider
//       value={{ tickets, tasks, resolved, addTask, completeTask }}
//     >
//       {children}
//     </TicketContext.Provider>
//   );
// }




//src/context/TicketContext.jsx

// import React, { createContext, useEffect, useState } from "react";

// export const TicketContext = createContext();

// export default function TicketProvider({ children }) {
//   const [tickets, setTickets] = useState([]); 
//   const [tasks, setTasks] = useState([]); ¬† ¬† 
//   const [resolved, setResolved] = useState([]);

//   // ... (useEffect for fetching JSON is fine) ...
//   useEffect(() => {
//     fetch("/tickets.json")
//       .then((res) => res.json())
//       .then((data) => {
//         // ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'Open' ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá
//         setTickets(data.map(t => ({...t, status: 'Open'})))
//       })
//       .catch((err) => console.error("Failed to load tickets:", err));
//   }, []);


//   const addTask = (ticket) => {
//     setTasks((prev) => {
//       // ‡¶Ø‡¶¶‡¶ø ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá tasks ‡¶è ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
//       if (prev.some((t) => t.id === ticket.id)) return prev;
//       return [...prev, {...ticket, status: 'In-Progress'}]; // ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
//     });
//     // Customer Tickets ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
//     setTickets((prev) => prev.filter((t) => t.id !== ticket.id));
//   };

//   /**
//    * üìù ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶Æ‡¶™‡ßç‡¶≤‡¶ø‡¶∂‡¶® ‡¶≤‡¶ú‡¶ø‡¶ï (‡¶Æ‡ßÇ‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®)
//    */
//   const completeTask = (ticket) => {
//     // 1. Resolved List ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
//     setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]);

//     // 2. In Progress ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (tasks) ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
//     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
    
//     // 3. Customer Tickets ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá‡¶ì ‡¶∏‡¶∞‡¶æ‡¶® (Requirement ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ)
//     // ‡¶Ø‡¶¶‡¶ø‡¶ì ‡¶è‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‡¶®‡¶æ (‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ In-Progress-‡¶è ‡¶ó‡ßá‡¶≤‡ßá ‡¶è‡¶ü‡¶ø Ticket List ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º), 
//     // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ü‡¶ø ‡¶ï‡ßã‡¶®‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ ‡¶è‡¶á ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º ‡¶´‡¶ø‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º‡•§
//     // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ addTask-‡¶è ‡¶Ü‡¶Æ‡¶∞‡¶æ tickets ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø, ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶Ö‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º, 
//     // ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡•§
//     // setTickets((prev) => prev.filter((t) => t.id !== ticket.id)); 
    
//     // ‡¶®‡ßã‡¶ü: ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ addTask ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø already tickets ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá, 
//     // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá tickets ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∞ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø resolved ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§
//   };

//   return (
//     <TicketContext.Provider
//       value={{ 
//         tickets, 
//         tasks, 
//         resolved, 
//         addTask, 
//         completeTask,
//         // ‡¶á‡¶®-‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶ì ‡¶∞‡¶ø‡¶ú‡¶≤‡¶≠‡¶° ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü Banner-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶≤‡ßã
//         inProgressCount: tasks.length,
//         resolvedCount: resolved.length
//       }}
//     >
//       {children}
//     </TicketContext.Provider>
//   );
// }





// // // src/context/TicketContext.jsx

// // // import React, { createContext, useEffect, useState } from "react";
// // // // ... (initialTickets import remains the same if you use it) ...

// // // export const TicketContext = createContext();

// // // export default function TicketProvider({ children }) {
// // //   const [tickets, setTickets] = useState([]); 
// // //   const [tasks, setTasks] = useState([]); ¬† ¬† 
// // //   const [resolved, setResolved] = useState([]);

// // //   useEffect(() => {
// // //     fetch("/tickets.json")
// // //       .then((res) => res.json())
// // //       .then((data) => {
// // //         // ‚úÖ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: JSON ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'Open' ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
// // //         setTickets(data.map(t => ({...t, status: 'Open'})))
// // //       })
// // //       .catch((err) => console.error("Failed to load tickets:", err));
// // //   }, []);


// // //   const addTask = (ticket) => {
// // //     setTasks((prev) => {
// // //       if (prev.some((t) => t.id === ticket.id)) return prev;
      
// // //       // ‚úÖ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: In-Progress ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'In-Progress' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
// // //       return [...prev, {...ticket, status: 'In-Progress'}]; 
// // //     });
// // //     // Customer Tickets ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
// // //     setTickets((prev) => prev.filter((t) => t.id !== ticket.id));
// // //   };

// // //   const completeTask = (ticket) => {
// // //     // Resolved List ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'Resolved' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
// // //     setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]); 

// // //     // In Progress ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (tasks) ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
// // //     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
// // //   };
  
// // //   // ... (value object remains the same) ...

// // //   return (
// // //     <TicketContext.Provider
// // //       value={{ 
// // //         tickets, 
// // //         tasks, 
// // //         resolved, 
// // //         addTask, 
// // //         completeTask,
// // //         inProgressCount: tasks.length,
// // //         resolvedCount: resolved.length
// // //       }}
// // //     >
// // //       {children}
// // //     </TicketContext.Provider>
// // //   );
// // // }






// src/context/TicketContext.jsx

// import React, { createContext, useEffect, useState } from "react";

// export const TicketContext = createContext();

// export default function TicketProvider({ children }) {
//   const [tickets, setTickets] = useState([]); // Open tickets
//   const [tasks, setTasks] = useState([]); ¬† ¬† // In-Progress tickets
//   const [resolved, setResolved] = useState([]); // Resolved tickets

//   useEffect(() => {
//     fetch("/tickets.json")
//       .then((res) => res.json())
//       .then((data) => {
//         // ‡¶°‡ßá‡¶ü‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶§‡¶ø‡¶®‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶¨‡¶ø‡¶≠‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
//         const initialOpenTickets = data.filter(t => t.status === 'Open');
//         const initialTasks = data.filter(t => t.status === 'In-Progress');
//         const initialResolved = data.filter(t => t.status === 'Resolved');
        
//         setTickets(initialOpenTickets);
//         setTasks(initialTasks);
//         setResolved(initialResolved);
        
//       })
//       //.catch((err) => console.error("Failed to load tickets:", err));
//   }, []);

//   const addTask = (ticket) => {
//     setTasks((prev) => {
//       // ‡¶Ø‡¶¶‡¶ø ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá tasks ‡¶è ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
//       if (prev.some((t) => t.id === ticket.id)) return prev;
//       return [...prev, {...ticket, status: 'In-Progress'}]; 
//     });
//     // Customer Tickets ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (Open) ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
//     setTickets((prev) => prev.filter((t) => t.id !== ticket.id));
//   };

//   const completeTask = (ticket) => {
//     // Resolved List ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
//     setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]);

//     // In Progress ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ (tasks) ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
//     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
//   };

//   return (
//     <TicketContext.Provider
//       value={{ tickets, tasks, resolved, addTask, completeTask,
//         inProgressCount: tasks.length,
//         resolvedCount: resolved.length
//       }}
//     >
//       {children}
//     </TicketContext.Provider>
//   );
// }








// src/context/TicketContext.jsx (‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏)

// import React, { createContext, useEffect, useState } from "react";
// import { toast } from "react-toastify"; // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø context ‡¶•‡ßá‡¶ï‡ßá toast ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶®

// export const TicketContext = createContext();

// export default function TicketProvider({ children }) {
//   const [tickets, setTickets] = useState([]);    // Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (Open + In-Progress)
//   const [tasks, setTasks] = useState([]);       // Task Status ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (In-Progress)
//   const [resolved, setResolved] = useState([]); // Resolved Task ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

//   useEffect(() => {
//     fetch("/tickets.json")
//       .then((res) => res.json())
//       .then((data) => {
        
//         // JSON ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü (Resolved ‡¶õ‡¶æ‡ßú‡¶æ) Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
//         const initialDisplayTickets = data.filter(t => t.status !== 'Resolved'); 
        
//         // Task Status-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø In-Progress ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (‡ß©‡¶ü‡¶ø)
//         const initialTasks = data.filter(t => t.status === 'In-Progress');
//         const initialResolved = data.filter(t => t.status === 'Resolved');
        
//         setTickets(initialDisplayTickets); // ‡¶Æ‡ßã‡¶ü ‡ßß‡ß¶‡¶ü‡¶ø ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü
//         setTasks(initialTasks);           // ‡¶Æ‡ßã‡¶ü ‡ß©‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï
//         setResolved(initialResolved);
        
//       })
//       .catch((err) => console.error("Failed to load tickets:", err));
//   }, []);

//   const addTask = (ticket) => {
//     // tasks ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//     setTasks((prev) => {
//       if (prev.some((t) => t.id === ticket.id)) return prev;
//       return [...prev, {...ticket, status: 'In-Progress'}]; 
//     });

//     // Home.jsx ‡¶è‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'In-Progress' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá
//     setTickets((prev) => 
//       prev.map(t => 
//         t.id === ticket.id ? {...t, status: 'In-Progress'} : t
//       )
//     );
//   };

//   const completeTask = (ticket) => {
//     // ... (‡¶≤‡¶ú‡¶ø‡¶ï ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ...
//     setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]);
//     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
    
//     // Home.jsx ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá Resolved ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã
//     setTickets((prev) => prev.filter((t) => t.id !== ticket.id)); 
//   };

//   return (
//     <TicketContext.Provider
//       value={{ 
//         tickets, 
//         tasks, 
//         resolved, 
//         addTask, 
//         completeTask,
//         inProgressCount: tasks.length,
//         resolvedCount: resolved.length
//       }}
//     >
//       {children}
//     </TicketContext.Provider>
//   );
// }


// src/context/TicketContext.jsx (‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏)

// import React, { createContext, useEffect, useState } from "react";
// // ... (toast import)

// export const TicketContext = createContext();

// export default function TicketProvider({ children }) {
//   const [tickets, setTickets] = useState([]);    // Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ Open ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá)
//   const [tasks, setTasks] = useState([]);       // Task Status ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (In-Progress)
//   const [resolved, setResolved] = useState([]); // Resolved Task ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

//   useEffect(() => {
//     fetch("/tickets.json")
//       .then((res) => res.json())
//       .then((data) => {
        
//         // ‚úÖ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: JSON ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ In-Progress ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá Open ‡¶è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
//         const normalizedData = data.map(t => {
//             // ‡¶Ø‡¶¶‡¶ø JSON ‡¶è In-Progress ‡¶¨‡¶æ Resolved ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá Open ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá)
//             if (t.status === 'In-Progress' || t.status === 'Resolved') {
//                 return { ...t, status: 'Open' };
//             }
//             return t;
//         });
        
//         // Resolved ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶∏‡¶¨ ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
//         const initialDisplayTickets = normalizedData.filter(t => t.status !== 'Resolved'); 
        
//         // ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶∏‡¶¨ In-Progress ‡¶ï‡ßá Open ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶§‡¶æ‡¶á initialTasks ‡¶è‡¶ñ‡¶® ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ (Count 0 ‡¶π‡¶¨‡ßá)
//         const initialTasks = []; 
        
//         // ‡¶Ø‡¶¶‡¶ø JSON ‡¶è Resolved ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶¨‡ßá ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
//         const initialResolved = normalizedData.filter(t => t.status === 'Resolved');
        
//         setTickets(initialDisplayTickets); // ‡¶Æ‡ßã‡¶ü ‡ßß‡ß¶‡¶ü‡¶ø ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü (‡¶∏‡¶¨ Open ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá)
//         setTasks(initialTasks);           // ‡¶Æ‡ßã‡¶ü ‡ß¶‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï
//         setResolved(initialResolved);
        
//       })
//       .catch((err) => console.error("Failed to load tickets:", err));
//   }, []);

//   const addTask = (ticket) => {
//     // tasks ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
//     setTasks((prev) => {
//       if (prev.some((t) => t.id === ticket.id)) return prev;
//       return [...prev, {...ticket, status: 'In-Progress'}]; 
//     });

//     // Home.jsx ‡¶è‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'In-Progress' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá
//     setTickets((prev) => 
//       prev.map(t => 
//         t.id === ticket.id ? {...t, status: 'In-Progress'} : t
//       )
//     );
//   };

//   const completeTask = (ticket) => {
//     // Resolved ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
//     setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]);

//     // tasks ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
//     setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
    
//     // Home.jsx ‡¶è‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'Resolved' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá (‡¶Ø‡¶¶‡¶ø ‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶π‡¶Ø‡¶º) 
//     setTickets((prev) => 
//       prev.map(t => 
//         t.id === ticket.id ? {...t, status: 'Resolved'} : t
//       )
//     );
    
//     // ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶æ‡¶® Home.jsx ‡¶•‡ßá‡¶ï‡ßáResolved ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü ‡¶è‡¶ï‡¶¶‡¶Æ ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶ï, ‡¶§‡¶¨‡ßá ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®:
//     // setTickets((prev) => prev.filter((t) => t.id !== ticket.id)); 
//   };

//   return (
//     <TicketContext.Provider
//       value={{ 
//         tickets, 
//         tasks, 
//         resolved, 
//         addTask, 
//         completeTask,
//         inProgressCount: tasks.length,
//         resolvedCount: resolved.length
//       }}
//     >
//       {children}
//     </TicketContext.Provider>
//   );
// }








// src/context/TicketContext.jsx

import React, { createContext, useEffect, useState } from "react";
import { toast } from "react-toastify";

export const TicketContext = createContext();

export default function TicketProvider({ children }) {
  const [tickets, setTickets] = useState([]);    // Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá (‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ Open ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá)
  const [tasks, setTasks] = useState([]);       // Task Status ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (In-Progress)
  const [resolved, setResolved] = useState([]); // Resolved Task ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

  useEffect(() => {
    fetch("/tickets.json")
      .then((res) => res.json())
      .then((data) => {
        
        // ‚úÖ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: JSON ‡¶°‡ßá‡¶ü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ In-Progress ‡¶è‡¶¨‡¶Ç Resolved ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶ï‡ßá Open ‡¶è ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
        // ‡¶´‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶≤‡ßã‡¶°‡ßá tasks ‡¶è‡¶¨‡¶Ç resolved ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§
        const normalizedData = data.map(t => {
            if (t.status === 'In-Progress' || t.status === 'Resolved') {
                return { ...t, status: 'Open' };
            }
            return t;
        });
        
        setTickets(normalizedData); // ‡¶Æ‡ßã‡¶ü ‡ßß‡ß¶‡¶ü‡¶ø ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü (‡¶∏‡¶¨ Open ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá)
        setTasks([]);               // ‡¶Æ‡ßã‡¶ü ‡ß¶‡¶ü‡¶ø ‡¶ü‡¶æ‡¶∏‡ßç‡¶ï
        setResolved([]);            // ‡¶Æ‡ßã‡¶ü ‡ß¶‡¶ü‡¶ø Resolved
        
      })
      .catch((err) => console.error("Failed to load tickets:", err));
  }, []);

  const addTask = (ticket) => {
    // tasks ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶§‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    setTasks((prev) => {
      if (prev.some((t) => t.id === ticket.id)) return prev;
      return [...prev, {...ticket, status: 'In-Progress'}]; 
    });

    // Home.jsx ‡¶è‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ 'In-Progress' ‡¶è ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶¨‡ßá
    setTickets((prev) => 
      prev.map(t => 
        t.id === ticket.id ? {...t, status: 'In-Progress'} : t
      )
    );
  };

  const completeTask = (ticket) => {
    // ‡ßß. Resolved ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    setResolved((prev) => [...prev, {...ticket, status: 'Resolved'}]);

    // ‡ß®. tasks ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá (In-Progress) ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®
    setTasks((prev) => prev.filter((t) => t.id !== ticket.id));
    
    // ‡ß©. ‚úÖ ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶´‡¶ø‡¶ï‡ßç‡¶∏: Home.jsx ‡¶è ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã tickets ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡¶ø‡¶ï‡¶ø‡¶ü‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá‡•§
    setTickets((prev) => prev.filter((t) => t.id !== ticket.id)); 
    toast.success(`${ticket.title} marked as Resolved!`);
  };

  return (
    <TicketContext.Provider
      value={{ 
        tickets, 
        tasks, 
        resolved, 
        addTask, 
        completeTask,
        inProgressCount: tasks.length,
        resolvedCount: resolved.length
      }}
    >
      {children}
    </TicketContext.Provider>
  );
}

  